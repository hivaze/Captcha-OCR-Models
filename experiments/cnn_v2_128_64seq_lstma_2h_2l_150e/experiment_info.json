{
    "best_epoch": {
        "number": 30,
        "train_loss": 0.15432585577798796,
        "eval_loss": 0.16528
    },
    "history": {
        "train": [
            0.16505638745766651,
            0.1732242143229593,
            0.1895122288525859,
            0.17964294062385075,
            0.17898087844818453,
            0.1638498227996162,
            0.2126844931818262,
            0.17163064990994298,
            0.17110714099452465,
            0.2423086462518837,
            0.21411810834196549,
            0.2998869901970972,
            0.20132583143967617,
            0.19282862185677396,
            0.1810473814795289,
            0.1759782682491254,
            0.19602437373958057,
            0.1786144878479499,
            0.181720857567425,
            0.1733776722339135,
            0.15547163784503937,
            0.1649710558637788,
            0.15597713399159757,
            0.16327244854426082,
            0.1586038755087913,
            0.1503878557417966,
            0.14910278629653062,
            0.13882422881035866,
            0.14785099303043342,
            0.14473532508068446,
            0.15432585577798796,
            0.16411222399601452,
            0.15175508443690552,
            0.17173695941514608,
            0.1780188439201705,
            0.16422349686109566,
            0.14432296166314354,
            0.14114092427152622,
            0.16068348081051548,
            0.15357504162607313,
            0.1872362131370774,
            0.17156068377102476,
            0.161883460381363,
            0.1497576854462865,
            0.1541427064545547,
            0.1424230616303939,
            0.13663507446269446,
            0.13452327487212193,
            0.12720950692892075,
            0.14375920489996294
        ],
        "eval": [
            0.19163,
            0.18958,
            0.21962,
            0.23301,
            0.17722,
            0.17683,
            0.18832,
            0.19415,
            0.35629,
            0.21915,
            0.32131,
            0.23933,
            0.21391,
            0.20325,
            0.2214,
            0.19856,
            0.19487,
            0.21947,
            0.17751,
            0.18944,
            0.18534,
            0.17262,
            0.1989,
            0.17734,
            0.17768,
            0.17559,
            0.17455,
            0.17369,
            0.16822,
            0.19119,
            0.16528,
            0.17834,
            0.17451,
            0.17637,
            0.20471,
            0.18513,
            0.16947,
            0.19077,
            0.17112,
            0.22108,
            0.24348,
            0.17899,
            0.17801,
            0.18264,
            0.17967,
            0.16612,
            0.17493,
            0.17208,
            0.17725,
            0.18009
        ]
    },
    "architecture": "OCR_CARNN(\n  (encoder): CNNImageEncoderV2(\n    (layers): Sequential(\n      (0): ConvBlock(\n        (bn): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(3, 32, kernel_size=(9, 9), stride=(1, 1), padding=(4, 4), bias=False)\n        (pooling): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (1): ConvBlock(\n        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(32, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)\n        (pooling): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (2): ConvBlock(\n        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(64, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (3): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (4): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (5): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n    )\n    (dropout): Dropout(p=0.1, inplace=False)\n    (out_net): Sequential(\n      (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n      (1): Linear(in_features=128, out_features=128, bias=True)\n    )\n  )\n  (decoder): SelfAttenBiLSTMImageDecoder(\n    (norm1): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n    (rnn): LSTM(128, 128, num_layers=2, dropout=0.1, bidirectional=True)\n    (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n    (self_atten): MultiheadAttention(\n      (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)\n    )\n    (out_proj): Linear(in_features=256, out_features=65, bias=True)\n  )\n  (softmax): LogSoftmax(dim=-1)\n)"
}