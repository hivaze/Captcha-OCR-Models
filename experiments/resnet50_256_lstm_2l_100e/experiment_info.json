{
    "best_epoch": {
        "number": 94,
        "train_loss": 0.08948586942462981,
        "eval_loss": 0.14489
    },
    "history": {
        "train": [
            5.263433728037001,
            4.396957928621316,
            4.372395207610311,
            4.33993940111957,
            4.260824185383471,
            4.10947716688808,
            3.665190144430233,
            2.2529985482179664,
            1.2519338862805427,
            0.7771595724021332,
            0.604942600183849,
            0.4684629723241058,
            0.4178961040098456,
            0.3708315416227413,
            0.33611842801299274,
            0.3119156405895571,
            0.2780939087837557,
            0.271452776804755,
            0.250035766465,
            0.23770484252821042,
            0.22095574249949637,
            0.2486983547105065,
            0.20866832759561418,
            0.21349255816091464,
            0.19667207930661454,
            0.18695737487530406,
            0.18533054522321193,
            0.18960260609282722,
            0.17631575597237936,
            0.17369380253779737,
            0.16714015574772148,
            0.16763134432744375,
            0.15923303695796412,
            0.1496838812209383,
            0.1466992826590055,
            0.14406159633322607,
            0.13988541028922116,
            0.1469090553590014,
            0.1418055836347085,
            0.13814262696836568,
            0.1500124697443805,
            0.1331263302436358,
            0.13045391468684883,
            0.1404832470454747,
            0.15226419185158574,
            0.12791305799272995,
            0.12619526835182046,
            0.13020242099897772,
            0.1199713985942587,
            0.12311835860527015,
            0.11756885084736196,
            0.11727944799239122,
            0.11206659486022176,
            0.11732008902332451,
            0.11674968247549443,
            0.10902173798295516,
            0.11635927271239366,
            0.1318951663148554,
            0.13051437746874894,
            0.11756787967832782,
            0.10414574917735933,
            0.11088038207609442,
            0.11512646239392366,
            0.10445978964054131,
            0.09587898378885246,
            0.10221038117438933,
            0.10046981822086286,
            0.0951656979284709,
            0.10404707255619991,
            0.10710679871749275,
            0.10260763009892235,
            0.09621105956125862,
            0.09621196353360068,
            0.10132574077837075,
            0.0875335777579229,
            0.08842190171155749,
            0.0853790743158588,
            0.09566751443132569,
            0.09197298182716852,
            0.09118588042410114,
            0.08634748729535296,
            0.07918725129735621,
            0.07971378236631804,
            0.08798484207142758,
            0.08862924189129963,
            0.08416352166405207,
            0.08244141118152987,
            0.08650362882998926,
            0.08460016520340231,
            0.0851406127308743,
            0.08350365806983996,
            0.09482224592113797,
            0.09563153680366805,
            0.08445750073164324,
            0.08948586942462981,
            0.09620831293773048,
            0.08026613049869295,
            0.09070205919538872,
            0.08126811155035527,
            0.07844826140547101
        ],
        "eval": [
            4.49665,
            4.38662,
            4.373,
            4.32296,
            4.24605,
            4.04438,
            3.09011,
            1.75729,
            1.02287,
            0.84378,
            0.59414,
            0.49178,
            0.42008,
            0.36555,
            0.35996,
            0.31988,
            0.29982,
            0.29158,
            0.28793,
            0.27192,
            0.26788,
            0.25099,
            0.26999,
            0.23908,
            0.22317,
            0.22094,
            0.21508,
            0.20625,
            0.23089,
            0.19192,
            0.18692,
            0.18591,
            0.20218,
            0.1733,
            0.19415,
            0.18913,
            0.17952,
            0.1828,
            0.17287,
            0.18436,
            0.18406,
            0.17534,
            0.17576,
            0.18698,
            0.18114,
            0.17322,
            0.17706,
            0.17887,
            0.17224,
            0.16404,
            0.16874,
            0.15675,
            0.16329,
            0.16485,
            0.15299,
            0.15553,
            0.16432,
            0.16217,
            0.1669,
            0.15422,
            0.14806,
            0.18143,
            0.16393,
            0.16075,
            0.15841,
            0.15871,
            0.15091,
            0.15007,
            0.15656,
            0.16647,
            0.15474,
            0.15185,
            0.21667,
            0.15567,
            0.154,
            0.15059,
            0.15502,
            0.16071,
            0.15441,
            0.16208,
            0.15196,
            0.14946,
            0.15319,
            0.17038,
            0.15032,
            0.14854,
            0.15541,
            0.15403,
            0.15765,
            0.15756,
            0.16331,
            0.17403,
            0.16565,
            0.14535,
            0.14489,
            0.15891,
            0.15675,
            0.15324,
            0.17087,
            0.15048
        ]
    },
    "architecture": "OCR_ResNetRNN(\n  (encoder): ResNetImageEncoder(\n    (pre_bath_norm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (model): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (4): Sequential(\n        (0): Bottleneck(\n          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (downsample): Sequential(\n            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): Bottleneck(\n          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n        )\n        (2): Bottleneck(\n          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n        )\n      )\n      (5): Sequential(\n        (0): Bottleneck(\n          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (downsample): Sequential(\n            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): Bottleneck(\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n        )\n        (2): Bottleneck(\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n        )\n        (3): Bottleneck(\n          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n        )\n      )\n    )\n    (head): Sequential(\n      (0): ConvBlock(\n        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (1): ConvBlock(\n        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (2): ConvBlock(\n        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n    )\n    (dropout): Dropout(p=0.1, inplace=False)\n    (out_net): Sequential(\n      (0): LayerNorm((512,), eps=1e-05, elementwise_affine=True)\n      (1): Linear(in_features=512, out_features=256, bias=True)\n    )\n  )\n  (decoder): BiLSTMImageDecoder(\n    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)\n    (rnn): LSTM(256, 256, num_layers=2, dropout=0.1, bidirectional=True)\n    (out_proj): Linear(in_features=512, out_features=65, bias=True)\n  )\n  (softmax): LogSoftmax(dim=-1)\n)"
}