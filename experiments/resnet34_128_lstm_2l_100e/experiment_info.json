{
    "best_epoch": {
        "number": 97,
        "train_loss": 0.11368791674134097,
        "eval_loss": 0.14845
    },
    "history": {
        "train": [
            5.632418258280694,
            4.402018136615995,
            4.380014316945136,
            4.3506213562398015,
            4.275899488714677,
            4.236413708216028,
            4.213360840761209,
            4.142596788044218,
            3.960466716862932,
            3.6214097149764437,
            2.970017484471768,
            2.318420558036128,
            1.8005737609501127,
            1.4035991777347614,
            1.0722936874703517,
            0.8000283512888076,
            0.6829486293128774,
            0.5872268382507034,
            0.5119761643530447,
            0.470224641923663,
            0.44479703224157985,
            0.42330356715600703,
            0.38710127035273784,
            0.35987429000154325,
            0.35139886525612846,
            0.3388355827029747,
            0.2992573174871976,
            0.3005806898014455,
            0.2917527954412412,
            0.27291310305082345,
            0.2647766838722591,
            0.2563976905768431,
            0.25690410540828224,
            0.2603127765881864,
            0.23959214344054838,
            0.2367032594695876,
            0.22616471802886529,
            0.23149504389943956,
            0.22289970083327232,
            0.2272715583632264,
            0.21076317886008492,
            0.21015254757072352,
            0.21475761845896515,
            0.20487768155864522,
            0.19673438964388038,
            0.19299158925497079,
            0.19786633588845218,
            0.18544118238400809,
            0.20296994342079647,
            0.18519999294341366,
            0.17472223796044725,
            0.18379416741147825,
            0.19370148302633552,
            0.17944386733483664,
            0.1739351205244849,
            0.16773667771227752,
            0.1676427613519415,
            0.16498279298030877,
            0.1635718031585971,
            0.16264437242776533,
            0.15142817078511925,
            0.15890273715876327,
            0.15490526734273644,
            0.15454391871072068,
            0.14865905999005596,
            0.1541963362052471,
            0.1475132141686693,
            0.15499675622846507,
            0.14982502049283136,
            0.14707298133569427,
            0.14108617047343072,
            0.1427375469592553,
            0.13699861050029344,
            0.13615075149868108,
            0.13825119673451292,
            0.14339741984311538,
            0.13572344749788695,
            0.13138046794677083,
            0.14083655838724934,
            0.13990019205250318,
            0.13416485092307948,
            0.12261797751806959,
            0.13554550877100305,
            0.14274736540981486,
            0.13560563174984122,
            0.1280071809887886,
            0.12085560030197795,
            0.1260514803513696,
            0.12390890830679785,
            0.12150563978696172,
            0.11553662345756459,
            0.12029376324219039,
            0.1203423421594161,
            0.133636966724939,
            0.12228623843645747,
            0.1220776268009898,
            0.11418641943343077,
            0.11368791674134097,
            0.1130608809711058,
            0.11438512981315202
        ],
        "eval": [
            4.52358,
            4.39336,
            4.41024,
            4.33667,
            4.26067,
            4.23016,
            4.22348,
            4.15107,
            3.91293,
            3.37063,
            2.77979,
            2.14943,
            2.13947,
            1.41424,
            0.93994,
            0.79525,
            0.69384,
            0.57622,
            0.51247,
            0.52896,
            0.49893,
            0.41198,
            0.36211,
            0.41475,
            0.37149,
            0.33092,
            0.33738,
            0.33525,
            0.30885,
            0.28411,
            0.29604,
            0.29416,
            0.27271,
            0.28311,
            0.27192,
            0.25565,
            0.2525,
            0.23665,
            0.2449,
            0.23885,
            0.25378,
            0.21322,
            0.2376,
            0.23311,
            0.21125,
            0.23078,
            0.21618,
            0.21551,
            0.21462,
            0.2156,
            0.19627,
            0.22093,
            0.21333,
            0.20818,
            0.19929,
            0.18888,
            0.21443,
            0.21045,
            0.18922,
            0.20557,
            0.19638,
            0.20259,
            0.1997,
            0.17727,
            0.19594,
            0.19444,
            0.18966,
            0.17723,
            0.18331,
            0.17309,
            0.18991,
            0.17794,
            0.16913,
            0.16911,
            0.19936,
            0.1763,
            0.16288,
            0.16649,
            0.1737,
            0.17444,
            0.16974,
            0.17395,
            0.18327,
            0.16743,
            0.17316,
            0.16882,
            0.15324,
            0.16253,
            0.15831,
            0.15617,
            0.1676,
            0.15693,
            0.15947,
            0.17098,
            0.16513,
            0.16205,
            0.15717,
            0.14845,
            0.15359,
            0.15849
        ]
    },
    "architecture": "OCR_ResNetRNN(\n  (encoder): ResNetImageEncoder(\n    (pre_bath_norm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (model): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (4): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (2): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (5): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (2): BasicBlock(\n          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (3): BasicBlock(\n          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n    )\n    (head): Sequential(\n      (0): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (1): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (2): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n    )\n    (dropout): Dropout(p=0.1, inplace=False)\n    (out_net): Sequential(\n      (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n      (1): Linear(in_features=128, out_features=128, bias=True)\n    )\n  )\n  (decoder): BiLSTMImageDecoder(\n    (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n    (rnn): LSTM(128, 128, num_layers=2, dropout=0.1, bidirectional=True)\n    (out_proj): Linear(in_features=256, out_features=65, bias=True)\n  )\n  (softmax): LogSoftmax(dim=-1)\n)"
}