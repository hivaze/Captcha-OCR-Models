{
    "best_epoch": {
        "number": 94,
        "train_loss": 0.12464742079565796,
        "eval_loss": 0.16665
    },
    "history": {
        "train": [
            5.7470638540726675,
            4.391800892503956,
            4.376589648331268,
            4.347095266173158,
            4.316054869301712,
            4.261601641208311,
            4.219692121578168,
            4.195442362676693,
            4.187173638162734,
            4.167255486114116,
            4.153102959258647,
            4.062702806690071,
            3.7977922687047645,
            3.1460514642015287,
            2.2052706132961224,
            1.4881232282783412,
            1.0879578371591205,
            0.8345607036276709,
            0.6871793843522856,
            0.5903358685819409,
            0.5272754476040225,
            0.4739253049409842,
            0.43414563506464415,
            0.41461470345907575,
            0.3759882352020167,
            0.36035491922233676,
            0.3419581066958512,
            0.3365754519082323,
            0.31859826305999034,
            0.30373991686332075,
            0.2858391970018797,
            0.2805888107683085,
            0.2671813404635538,
            0.2704003358943553,
            0.251669519875623,
            0.24995979874194424,
            0.24292057639435877,
            0.24364168168623238,
            0.23106833971753904,
            0.2352972920936874,
            0.22225909821594816,
            0.23147315579124644,
            0.216565529002419,
            0.21253884366795986,
            0.19913092802597,
            0.19899674042870727,
            0.19995441863053962,
            0.18837179054942313,
            0.20880111165439028,
            0.19876901107498363,
            0.18917194310622878,
            0.18095659351424326,
            0.18712592313561258,
            0.17245631089693383,
            0.17837968298906012,
            0.1751172883978373,
            0.16657671275772626,
            0.16985229751731776,
            0.16776305767177027,
            0.16635213471666166,
            0.1677312034217617,
            0.16184273560213136,
            0.15879191929780984,
            0.15991511724040477,
            0.15293257938155644,
            0.15322613687832146,
            0.15853517832635325,
            0.16162938473722602,
            0.15063469517457334,
            0.15177495060842247,
            0.14472368416152423,
            0.14380096672456474,
            0.14429429220625117,
            0.1459252003438865,
            0.1488386670811267,
            0.14439067433152017,
            0.1427225946814199,
            0.13684395186697382,
            0.1377766127639179,
            0.13647688378261613,
            0.13782309882248503,
            0.12784863697199883,
            0.13530217837306519,
            0.13385130531048473,
            0.1427570937932292,
            0.12823108960933324,
            0.12419188645067095,
            0.13521036090730112,
            0.1259322712504411,
            0.12319920410083819,
            0.1280516278517397,
            0.12381529100710832,
            0.12240249918231481,
            0.1262339034789725,
            0.12464742079565796,
            0.12273508074540126,
            0.11747449419543712,
            0.11311873784170876,
            0.12200362480516676,
            0.12496133686243734
        ],
        "eval": [
            4.43846,
            4.3814,
            4.36463,
            4.33074,
            4.28736,
            4.24031,
            4.23488,
            4.19686,
            4.18729,
            4.16586,
            4.12937,
            3.99628,
            3.52568,
            2.78672,
            1.85945,
            1.28273,
            0.96602,
            0.75763,
            0.68824,
            0.54675,
            0.51973,
            0.52334,
            0.44877,
            0.40937,
            0.3846,
            0.38595,
            0.34919,
            0.34144,
            0.31704,
            0.32157,
            0.3088,
            0.30052,
            0.28966,
            0.29662,
            0.27874,
            0.28433,
            0.26482,
            0.26693,
            0.26579,
            0.24908,
            0.27234,
            0.25285,
            0.24291,
            0.24519,
            0.24308,
            0.24142,
            0.23773,
            0.24708,
            0.23947,
            0.22679,
            0.22716,
            0.21827,
            0.23133,
            0.21629,
            0.21959,
            0.20859,
            0.19904,
            0.20552,
            0.20716,
            0.2053,
            0.20586,
            0.19278,
            0.18599,
            0.18919,
            0.19421,
            0.19865,
            0.19499,
            0.20249,
            0.18669,
            0.19595,
            0.19135,
            0.19408,
            0.1826,
            0.18314,
            0.19448,
            0.18006,
            0.19521,
            0.17312,
            0.20786,
            0.17552,
            0.17433,
            0.18194,
            0.1821,
            0.17922,
            0.17141,
            0.17348,
            0.17744,
            0.19499,
            0.17792,
            0.17654,
            0.17214,
            0.17226,
            0.16826,
            0.18147,
            0.16665,
            0.17622,
            0.16795,
            0.16736,
            0.18283,
            0.16687
        ]
    },
    "architecture": "OCR_ResNetRNN(\n  (encoder): ResNetImageEncoder(\n    (pre_bath_norm): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (model): Sequential(\n      (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (2): ReLU(inplace=True)\n      (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      (4): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (5): Sequential(\n        (0): BasicBlock(\n          (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (downsample): Sequential(\n            (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          )\n        )\n        (1): BasicBlock(\n          (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (relu): ReLU(inplace=True)\n          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n    )\n    (head): Sequential(\n      (0): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (1): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n      (2): ConvBlock(\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (pooling): MaxPool2d(kernel_size=(2, 1), stride=(2, 1), padding=0, dilation=1, ceil_mode=False)\n        (activation): Hardswish()\n      )\n    )\n    (dropout): Dropout(p=0.1, inplace=False)\n    (out_net): Sequential(\n      (0): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n      (1): Linear(in_features=128, out_features=128, bias=True)\n    )\n  )\n  (decoder): BiLSTMImageDecoder(\n    (norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)\n    (rnn): LSTM(128, 128, num_layers=2, dropout=0.1, bidirectional=True)\n    (out_proj): Linear(in_features=256, out_features=65, bias=True)\n  )\n  (softmax): LogSoftmax(dim=-1)\n)"
}